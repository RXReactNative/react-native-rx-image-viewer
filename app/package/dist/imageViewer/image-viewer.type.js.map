{"version":3,"sources":["../../src/imageViewer/image-viewer.type.js"],"names":["React","View","ViewProps","PropTypes","ImageViewerPropsType","show","bool","index","number","imageUrls","shape","IImageInfo","flipThreshold","maxOverflow","failImageSource","backgroundColor","string","footerContainerStyle","object","menuContext","saveToLocal","cancel","saveToLocalByLongPress","enableImageZoom","enableSwipeDown","swipeDownThreshold","doubleClickInterval","enablePreload","pageAnimateTime","onLongPress","func","onClick","onDoubleClick","onSave","onMove","renderHeader","renderFooter","renderIndicator","renderImage","renderArrowLeft","renderArrowRight","onShowModal","onCancel","onSwipeDown","loadingRender","onSaveToCamera","onChange","menus","ImageViewerDefaultProps","defaultProps","url","width","height","sizeKb","originSizeKb","originUrl","props","any","freeHeight","boolean","freeWidth"],"mappings":"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","file":"image-viewer.type.js","sourcesContent":["/**\n * \n */\nimport * as React from \"react\";\nimport {\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport * as PropTypes from \"prop-types\";\n\n//-------------------------------------------------------------------------------\nexport const ImageViewerPropsType = {\n  ...ViewProps,\n\n  /**\n   * 是否显示\n   */\n  show: PropTypes.bool,\n\n  /**\n   * 初始显示第几张图\n   */\n  index: PropTypes.number,\n\n  /**\n   * 图片数组\n   */\n  imageUrls: PropTypes.shape( IImageInfo ),\n\n  /**\n   * 滑动到下一页的X阈值\n   */\n  flipThreshold: PropTypes.number,\n\n  /**\n   * 当前页能滑到下一页X位置最大值\n   */\n  maxOverflow: PropTypes.number,\n\n  /**\n   * 加载失败的图\n   */\n  failImageSource: PropTypes.shape( IImageInfo ),\n\n  /**\n   * 背景颜色\n   */\n  backgroundColor: PropTypes.string,\n\n  /**\n   * style props for the footer container\n   */\n  footerContainerStyle: PropTypes.object,\n\n  /**\n   * Menu Context Values\n   */\n  menuContext: PropTypes.shape({\n    saveToLocal: PropTypes.string,\n    cancel: PropTypes.string,\n  }),\n\n  /**\n   * 是否开启长按保存到本地的功能\n   */\n  saveToLocalByLongPress: PropTypes.bool,\n\n  /**\n   * 是否允许缩放图片\n   */\n  enableImageZoom: PropTypes.bool,\n\n  /**\n   * Enable swipe down to close image viewer.\n   * When swipe down, will trigger onCancel.\n   */\n  enableSwipeDown: PropTypes.bool,\n\n  /**\n   * threshold for firing swipe down function\n   */\n  swipeDownThreshold: PropTypes.number,\n\n\n  doubleClickInterval: PropTypes.number,\n\n  /**\n   * 是否预加载图片\n   */\n  enablePreload: PropTypes.bool,\n\n  /**\n   * 翻页时的动画时间\n   */\n  pageAnimateTime: PropTypes.number,\n\n  /**\n   * 长按图片的回调\n   */\n  onLongPress: PropTypes.func,\n\n  /**\n   * 单击回调\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * 双击回调\n   */\n  onDoubleClick: PropTypes.func,\n  \n  /**\n   * 图片保存到本地方法，如果写了这个方法，就不会调取系统默认方法\n   * 针对安卓不支持 saveToCameraRoll 远程图片，可以在安卓调用此回调，调用安卓原生接口\n   */\n  onSave: PropTypes.func,\n\n  onMove: PropTypes.func,\n\n  /**\n   * 自定义头部\n   */\n  renderHeader: PropTypes.func,\n\n  /**\n   * 自定义尾部\n   */\n  renderFooter: PropTypes.func,\n\n  /**\n   * 自定义计时器\n   */\n  renderIndicator: PropTypes.func,\n\n  /**\n   * Render image component\n   */\n  renderImage: PropTypes.func,\n\n  /**\n   * 自定义左翻页按钮\n   */\n  renderArrowLeft: PropTypes.func,\n\n  /**\n   * 自定义右翻页按钮\n   */\n  renderArrowRight: PropTypes.func,\n\n  /**\n   * 弹出大图的回调\n   */\n  onShowModal: PropTypes.func,\n\n  /**\n   * 取消看图的回调\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * function that fires when user swipes down\n   */\n  onSwipeDown: PropTypes.func,\n\n  /**\n   * 渲染loading元素\n   */\n  loadingRender: PropTypes.func,\n\n  /**\n   * 保存到相册的回调\n   */\n  onSaveToCamera: PropTypes.func,\n\n  /**\n   * 当图片切换时触发\n   */\n  onChange: PropTypes.func,\n  menus: PropTypes.func,\n}\n\n//-------------------------------------------------------------------------------\nexport const ImageViewerDefaultProps = {\n  ...View.defaultProps,\n  show: false,\n  index: 0,\n  imageUrls: [],\n  flipThreshold: 80,\n  maxOverflow: 300,\n  failImageSource: null,\n  backgroundColor: 'black',\n  footerContainerStyle: {},\n  menuContext: { saveToLocal: 'save to the album', cancel: 'cancel' },\n  saveToLocalByLongPress: false,\n  enableImageZoom: true,\n  enableSwipeDown: false,\n  swipeDownThreshold: 0,\n  doubleClickInterval: 0,\n  enablePreload: false,\n  pageAnimateTime: 100,\n  // onLongPress: (image?:IImageInfo)=>{},\n  // onClick: (close, currentShowIndex=0)=>{},\n  // onDoubleClick: (close=() => any)=>{},\n  // onSave: (uri='')=>{},\n  // onMove: (position={type:'', positionX:0, positionY:0, scale:0, zoomCurrentDistance:0})=>{},\n  // renderHeader: (currentIndex=0)=>{},\n  // renderFooter: (currentIndex=0)=>{},\n  // renderIndicator: (currentIndex=0, allSize=0)=>{},\n  // renderImage: (props=null)=>{},\n  // renderArrowLeft: ()=>{},\n  // renderArrowRight: ()=>{},\n  // onShowModal: (content=null)=>{},\n  // onCancel: ()=>{},\n  // onSwipeDown: ()=>{},\n  // loadingRender: ()=>{},\n  // onSaveToCamera: (index=0)=>{},\n  // onChange: (index=0)=>{},\n  // menus: (obj={ cancel : null, saveToLocal: null })=>{},\n}\n\n\n\n//-------------------------------------------------------------------------------\nexport const IImageInfo = {\n  url: PropTypes.string,\n  /**\n   * 没有的话会自动拉取\n   */\n  width: PropTypes.number,\n  /**\n   * 没有的话会自动拉取\n   */\n  height: PropTypes.number,\n  /**\n   * 图片字节大小(kb为单位)\n   */\n  sizeKb: PropTypes.number,\n  /**\n   * 原图字节大小(kb为单位)\n   * 如果设置了这个字段,并且有原图url,则显示查看原图按钮\n   */\n  originSizeKb: PropTypes.number,\n  /**\n   * 原图url地址\n   */\n  originUrl: PropTypes.string,\n  /**\n   * Pass to image props\n   */\n  props: PropTypes.any,\n  /**\n   * 初始是否不超高 TODO:\n   */\n  freeHeight: PropTypes.boolean,\n  /**\n   * 初始是否不超高 TODO:\n   */\n  freeWidth: PropTypes.boolean,\n}\n"]}